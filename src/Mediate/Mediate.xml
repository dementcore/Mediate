<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mediate</name>
    </assembly>
    <members>
        <member name="T:Mediate.Abstractions.IEvent">
            <summary>
            Marker interface for defining an event
            </summary>
        </member>
        <member name="T:Mediate.Abstractions.IEventDispatchStrategy">
            <summary>
            Interface for implement an event dispatch strategy
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IEventDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}})">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Abstractions.IEventDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Mediate.Abstractions.IEventHandler`1">
            <summary>
            Interface for implement an event handler for an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
        </member>
        <member name="M:Mediate.Abstractions.IEventHandler`1.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            Handle the event
            </summary>
            <param name="event">Event data</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Mediate.Abstractions.IEventMiddleware`1">
            <summary>
            Interface to implement a middleware to process an event before it reaches it's handlers.
            <typeparamref name="TEvent">Event type</typeparamref>
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IEventMiddleware`1.Invoke(`0,System.Threading.CancellationToken,Mediate.Abstractions.NextMiddlewareDelegate)">
            <summary>
            Invoke the middleware logic
            </summary>
            <param name="event">Event object</param>
            <param name="cancellationToken"></param>
            <param name="next">Delegate that encapsulates a call to the next element in the pipeline</param>
            <returns></returns>
        </member>
        <member name="T:Mediate.Abstractions.IMediator">
            <summary>
            Mediator interface
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IMediator.Send``2(``0)">
            <summary>
            Sends a query to the mediator
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <param name="query">Query data</param>
            <returns>Query response</returns>
        </member>
        <member name="M:Mediate.Abstractions.IMediator.Send``2(``0,System.Threading.CancellationToken)">
            <summary>
            Sends a query to the mediator
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <param name="query">Query data</param>
            <param name="cancellationToken"></param>
            <returns>Query response</returns>
        </member>
        <member name="M:Mediate.Abstractions.IMediator.Send``1(Mediate.Abstractions.IQuery{``0})">
            <summary>
            Sends a query to the mediator
            </summary>
            <typeparam name="TResult">Query response type</typeparam>
            <param name="query">Query data</param>
            <returns>Query response</returns>
        </member>
        <member name="M:Mediate.Abstractions.IMediator.Send``1(Mediate.Abstractions.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a query to the mediator
            </summary>
            <typeparam name="TResult">Query response type</typeparam>
            <param name="query">Query data</param>
            <param name="cancellationToken"></param>
            <returns>Query response</returns>
        </member>
        <member name="M:Mediate.Abstractions.IMediator.Dispatch``1(``0)">
            <summary>
            Dispatchs an event to the mediator
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Abstractions.IMediator.Dispatch``1(``0,System.Threading.CancellationToken)">
            <summary>
            Dispatchs an event to the mediator
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Mediate.Abstractions.IQuery`1">
            <summary>
            Marker interface for implement a query with a response
            </summary>
            <typeparam name="TResult">Query response type</typeparam>
        </member>
        <member name="T:Mediate.Abstractions.IQueryHandler`2">
            <summary>
            Interface for implement a query handler for a concrete query
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
        </member>
        <member name="M:Mediate.Abstractions.IQueryHandler`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            Handle the message
            </summary>
            <param name="query">Message data</param>
            <param name="cancellationToken"></param>
            <returns>Message response</returns>
        </member>
        <member name="T:Mediate.Abstractions.IQueryMiddleware`2">
            <summary>
            Interface to implement a middleware to process a query before it reaches it's handler.
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IQueryMiddleware`2.Invoke(`0,System.Threading.CancellationToken,Mediate.Abstractions.NextMiddlewareDelegate{`1})">
            <summary>
            Invoke the middleware logic
            </summary>
            <param name="query">Query object</param>
            <param name="cancellationToken"></param>
            <param name="next">Delegate that encapsulates a call to the next element in the pipeline</param>
            <returns></returns>
        </member>
        <member name="T:Mediate.Abstractions.NextMiddlewareDelegate">
            <summary>
            Delegate to call next middleware in the mediate pipeline
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mediate.Abstractions.NextMiddlewareDelegate`1">
            <summary>
            Delegate to call next middleware in the mediate pipeline
            </summary>
            <typeparam name="TResult">Query response type</typeparam>
            <returns></returns>
        </member>
        <member name="T:Mediate.Abstractions.IEventHandlerProvider">
            <summary>
            Interface for implement an event handler provider
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IEventHandlerProvider.GetHandlers``1">
            <summary>
            Gets all event handlers from an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <returns>All registered handlers for that event</returns>
        </member>
        <member name="T:Mediate.Abstractions.IEventMiddlewareProvider">
            <summary>
            Interface for implement an event middleware provider
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IEventMiddlewareProvider.GetMiddlewares``1">
            <summary>
            Gets all event middlewares from an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <returns>All registered middlewares for that event</returns>
        </member>
        <member name="T:Mediate.Abstractions.IHandlerProvider">
            <summary>
            Defines a provider that encapsulates event and query handlers provider
            </summary>
        </member>
        <member name="T:Mediate.Abstractions.IMiddlewareProvider">
            <summary>
            Defines a provider that encapsulates event and query middlewares provider
            </summary>
        </member>
        <member name="T:Mediate.Abstractions.IQueryHandlerProvider">
            <summary>
            Interface for implement a query handler provider
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IQueryHandlerProvider.GetHandler``2">
            <summary>
            Gets a query handler from a concrete query
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <returns>Registered handler for that query</returns>
        </member>
        <member name="T:Mediate.Abstractions.IQueryMiddlewareProvider">
            <summary>
            Interface for implement a query middleware provider
            </summary>
        </member>
        <member name="M:Mediate.Abstractions.IQueryMiddlewareProvider.GetMiddlewares``2">
            <summary>
            Gets all query middlewares from a query
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <returns>All registered middlewares for that query</returns>
        </member>
        <member name="T:Mediate.Configuration.IMediateBuilder">
            <summary>
            Helper methods to configure Mediate
            </summary>
        </member>
        <member name="M:Mediate.Configuration.IMediateBuilder.AddServiceProviderHandlerProvider">
            <summary>
            Registers an handler provider for queries and events that are retrieved from AspNetCore Service Provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mediate.Configuration.IMediateBuilder.AddServiceProviderMiddlewareProvider">
            <summary>
            Registers an middleware provider for queries and events that are retrieved from AspNetCore Service Provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mediate.Configuration.IMediateBuilder.AddCustomHandlerProvider``1">
            <summary>
            Registers a custom handler provider for queries and events
            </summary>
            <typeparam name="THandlerProvider">Handler provider implementation type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mediate.Configuration.IMediateBuilder.AddCustomMiddlewareProvider``1">
            <summary>
            Registers a custom middleware provider for queries and events
            </summary>
            <typeparam name="TMiddlewareProvider">Middleware provider implementation type</typeparam>
            <returns></returns>
        </member>
        <member name="M:Mediate.Configuration.RegisterHelpers.IsNotAbstract(System.Type)">
            <summary>
            Determines if the type is not abstract class and is not an interface
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Configuration.RegisterHelpers.IsClosedType(System.Type)">
            <summary>
            Determines if the type is closed
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Configuration.RegisterHelpers.IsOpenType(System.Type)">
            <summary>
            Determines if the type is an open generic type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Mediate.DispatchStrategies.EventQueueDispatchStrategy">
            <summary>
            Event dispatch strategy that enqueues events to be handled by a background job.
            </summary>
        </member>
        <member name="M:Mediate.DispatchStrategies.EventQueueDispatchStrategy.#ctor(Mediate.Queue.EventQueue)">
            <summary>
            Event queue dispatch strategy constructor
            </summary>
            <param name="eventQueue">Event queue implementation</param>
        </member>
        <member name="M:Mediate.DispatchStrategies.EventQueueDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}})">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.DispatchStrategies.EventQueueDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Mediate.DispatchStrategies.EventQueueDispatchStrategy.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:Mediate.DispatchStrategies.ParallelEventDispatchStrategy">
            <summary>
            Event dispatch strategy that executes event handlers in parallel.
            </summary>
        </member>
        <member name="M:Mediate.DispatchStrategies.ParallelEventDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}})">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.DispatchStrategies.ParallelEventDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Mediate.DispatchStrategies.ParallelEventDispatchStrategy.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:Mediate.DispatchStrategies.SequentialEventDispatchStrategy">
            <summary>
            Event dispatch strategy that executes event handlers after one another.
            </summary>
        </member>
        <member name="M:Mediate.DispatchStrategies.SequentialEventDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}})">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.DispatchStrategies.SequentialEventDispatchStrategy.Dispatch``1(``0,System.Collections.Generic.IEnumerable{Mediate.Abstractions.IEventHandler{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes this strategy to dispatch an event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="handlers">Event handlers</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Mediate.DispatchStrategies.SequentialEventDispatchStrategy.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:Mediate.HostedService.EventDispatcherService">
            <summary>
            Job to handle the enqueued events. <br/>
            This class is public to allow registration into DI containers like Autofac, Unity, etc. <br/>
            This shouldn't be used directly from user code. <br/>
            </summary>
        </member>
        <member name="M:Mediate.HostedService.EventDispatcherService.#ctor(Microsoft.Extensions.Logging.ILogger{Mediate.HostedService.EventDispatcherService},Mediate.Queue.EventQueue)">
            <summary>
            Event dispatcher service constructor
            </summary>
            <param name="logger"></param>
            <param name="backgroundEventQueue"></param>
        </member>
        <member name="M:Mediate.HostedService.EventDispatcherService.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Hosted service start method
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Mediate.HostedService.EventDispatcherService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            Hosted service execute method
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:Mediate.HostedService.EventDispatcherService.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Hosted service stop method
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Mediate.Mediator">
            <summary>
            Default mediator implementation
            </summary>
        </member>
        <member name="M:Mediate.Mediator.#ctor(Mediate.Abstractions.IHandlerProvider,Mediate.Abstractions.IMiddlewareProvider,Mediate.Abstractions.IEventDispatchStrategy)">
            <summary>
            Mediator constructor
            </summary>
            <param name="provider">Event and query handlers provider</param>
            <param name="middlewareProvider">Event and query middlewares provider</param>
            <param name="eventDispatchStrategy">Event dispatching strategy to use</param>
        </member>
        <member name="M:Mediate.Mediator.Dispatch``1(``0)">
            <summary>
            Dispatchs an event into configured dispatch strategy
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Mediator.Dispatch``1(``0,System.Threading.CancellationToken)">
            <summary>
            Dispatchs an event into configured dispatch strategy
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="event">Event data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Mediator.Send``1(Mediate.Abstractions.IQuery{``0})">
            <summary>
            Sends a query to his handler and returns a response
            </summary>
            <typeparam name="TResult">Response type</typeparam>
            <param name="query">Query data</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Mediator.Send``1(Mediate.Abstractions.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a query to his handler and returns a response
            </summary>
            <typeparam name="TResult">Response type</typeparam>
            <param name="query">Query data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns></returns>
        </member>
        <member name="M:Mediate.Mediator.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Mediate.Mediator.Send``2(``0)">
            <summary>
            Sends a query to the mediator
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <param name="query">Query data</param>
            <returns>Query response</returns>
        </member>
        <member name="M:Mediate.Mediator.Send``2(``0,System.Threading.CancellationToken)">
            <summary>
            Sends a query to the mediator
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <param name="query">Query data</param>
            <param name="cancellationToken"></param>
            <returns>Query response</returns>
        </member>
        <member name="T:Mediate.Queue.EventQueue">
            <summary>
            Event queue for the EventQueueDispatchStrategy. <br/>
            This class is public to allow registration into DI containers like Autofac, Unity, etc.<br/>
            This shouldn't be used directly from user code. <br/>
            </summary>
        </member>
        <member name="T:Mediate.Queue.QueuedEventWrapperBase">
            <summary>
            Wrapper class to represent a event into the event queue
            </summary>
        </member>
        <member name="T:Mediate.Queue.QueuedEventWrapper`1">
            <summary>
            Wrapper class to represent a event into the event queue
            </summary>
        </member>
        <member name="T:Mediate.ServiceProviderHandlerProvider">
            <summary>
            Message and event handler provider from IServiceProvider
            </summary>
        </member>
        <member name="M:Mediate.ServiceProviderHandlerProvider.#ctor(System.IServiceProvider)">
            <summary>
            constructor
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Mediate.ServiceProviderHandlerProvider.GetHandlers``1">
            <summary>
            Gets all event handlers from an event from the IServiceProvider
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <returns>All registered handlers for that event</returns>
        </member>
        <member name="M:Mediate.ServiceProviderHandlerProvider.GetHandler``2">
            <summary>
            Gets a query handler from a concrete query from the IServiceProvider
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <returns>Registered handler for that query</returns>
        </member>
        <member name="M:Mediate.ServiceProviderHandlerProvider.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:Mediate.ServiceProviderMiddlewareProvider">
            <summary>
            Message and event middleware provider from IServiceProvider
            </summary>
        </member>
        <member name="M:Mediate.ServiceProviderMiddlewareProvider.#ctor(System.IServiceProvider)">
            <summary>
            constructor
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:Mediate.ServiceProviderMiddlewareProvider.GetMiddlewares``1">
            <summary>
            Gets all event middlewares from an event from the IServiceProvider
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <returns>All registered middlewares for that event</returns>
        </member>
        <member name="M:Mediate.ServiceProviderMiddlewareProvider.GetMiddlewares``2">
            <summary>
            Gets all query middlewares from a query from the IServiceProvider
            </summary>
            <typeparam name="TQuery">Query type</typeparam>
            <typeparam name="TResult">Query response type</typeparam>
            <returns>All registered middlewares for that query</returns>
        </member>
        <member name="M:Mediate.ServiceProviderMiddlewareProvider.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Service collection extension methods
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method registers the Mediator and returns a builder to configure Mediate.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediate(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method configures all Mediate default services. Similar to call
            <see cref="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateCore(Microsoft.Extensions.DependencyInjection.IServiceCollection)"></see>, 
            <see cref="M:Mediate.Configuration.IMediateBuilder.AddServiceProviderHandlerProvider"></see> and
            <see cref="M:Mediate.Configuration.IMediateBuilder.AddServiceProviderMiddlewareProvider"></see>
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateParallelEventDispatchStrategy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Mediate to use the parallel event dispatch strategy
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateEventQueueDispatchStrategy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Mediate to use the background queue event dispatch strategy.
            Registers a hosted service called EventDispatcherService, a queue and EventQueueDispatchStrategy class.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateSequentialEventDispatchStrategy(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Mediate to use the sequential event dispatch strategy
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateCustomDispatchStrategy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Mediate to use a custom event dispatch strategy
            </summary>
            <typeparam name="TDispatchStrategy"></typeparam>
            <param name="services"></param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateCustomDispatchStrategy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Configures Mediate to use a custom event dispatch strategy
            </summary>
            <typeparam name="TDispatchStrategy"></typeparam>
            <param name="services"></param>
            <param name="lifetime">ServiceLifetime for the DI container</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.AddMediateClassesFromAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly)">
            <summary>
            Helper method to register events, querys, handlers and middlewares from an assembly
            </summary>
            <param name="services">service collection</param>
            <param name="assembly">Assembly to scan</param>
        </member>
    </members>
</doc>
